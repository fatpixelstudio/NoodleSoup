console.log('head scripts!');

/*! modernizr 3.6.0 (Custom Build) | MIT *
	 * https://modernizr.com/download/?-cssanimations-cssgradients-cssgrid_cssgridlegacy-csstransforms-csstransforms3d-csstransitions-flexbox-objectfit-svg-templatestrings-touchevents-setclasses !*/
!function (window, document, undefined) { function is(e, t) { return typeof e === t } function testRunner() { var e, t, n, r, o, s, i; for (var d in tests) if (tests.hasOwnProperty(d)) { if (e = [], t = tests[d], t.name && (e.push(t.name.toLowerCase()), t.options && t.options.aliases && t.options.aliases.length)) for (n = 0; n < t.options.aliases.length; n++)e.push(t.options.aliases[n].toLowerCase()); for (r = is(t.fn, "function") ? t.fn() : t.fn, o = 0; o < e.length; o++)s = e[o], i = s.split("."), 1 === i.length ? Modernizr[i[0]] = r : (!Modernizr[i[0]] || Modernizr[i[0]] instanceof Boolean || (Modernizr[i[0]] = new Boolean(Modernizr[i[0]])), Modernizr[i[0]][i[1]] = r), classes.push((r ? "" : "no-") + i.join("-")) } } function setClasses(e) { var t = docElement.className, n = Modernizr._config.classPrefix || ""; if (isSVG && (t = t.baseVal), Modernizr._config.enableJSClass) { var r = new RegExp("(^|\\s)" + n + "no-js(\\s|$)"); t = t.replace(r, "$1" + n + "js$2") } Modernizr._config.enableClasses && (t += " " + n + e.join(" " + n), isSVG ? docElement.className.baseVal = t : docElement.className = t) } function createElement() { return "function" != typeof document.createElement ? document.createElement(arguments[0]) : isSVG ? document.createElementNS.call(document, "http://www.w3.org/2000/svg", arguments[0]) : document.createElement.apply(document, arguments) } function cssToDOM(e) { return e.replace(/([a-z])-([a-z])/g, function (e, t, n) { return t + n.toUpperCase() }).replace(/^-/, "") } function getBody() { var e = document.body; return e || (e = createElement(isSVG ? "svg" : "body"), e.fake = !0), e } function injectElementWithStyles(e, t, n, r) { var o, s, i, d, l = "modernizr", a = createElement("div"), f = getBody(); if (parseInt(n, 10)) for (; n--;)i = createElement("div"), i.id = r ? r[n] : l + (n + 1), a.appendChild(i); return o = createElement("style"), o.type = "text/css", o.id = "s" + l, (f.fake ? f : a).appendChild(o), f.appendChild(a), o.styleSheet ? o.styleSheet.cssText = e : o.appendChild(document.createTextNode(e)), a.id = l, f.fake && (f.style.background = "", f.style.overflow = "hidden", d = docElement.style.overflow, docElement.style.overflow = "hidden", docElement.appendChild(f)), s = t(a, e), f.fake ? (f.parentNode.removeChild(f), docElement.style.overflow = d, docElement.offsetHeight) : a.parentNode.removeChild(a), !!s } function contains(e, t) { return !!~("" + e).indexOf(t) } function fnBind(e, t) { return function () { return e.apply(t, arguments) } } function testDOMProps(e, t, n) { var r; for (var o in e) if (e[o] in t) return n === !1 ? e[o] : (r = t[e[o]], is(r, "function") ? fnBind(r, n || t) : r); return !1 } function domToCSS(e) { return e.replace(/([A-Z])/g, function (e, t) { return "-" + t.toLowerCase() }).replace(/^ms-/, "-ms-") } function computedStyle(e, t, n) { var r; if ("getComputedStyle" in window) { r = getComputedStyle.call(window, e, t); var o = window.console; if (null !== r) n && (r = r.getPropertyValue(n)); else if (o) { var s = o.error ? "error" : "log"; o[s].call(o, "getComputedStyle returning null, its possible modernizr test results are inaccurate") } } else r = !t && e.currentStyle && e.currentStyle[n]; return r } function nativeTestProps(e, t) { var n = e.length; if ("CSS" in window && "supports" in window.CSS) { for (; n--;)if (window.CSS.supports(domToCSS(e[n]), t)) return !0; return !1 } if ("CSSSupportsRule" in window) { for (var r = []; n--;)r.push("(" + domToCSS(e[n]) + ":" + t + ")"); return r = r.join(" or "), injectElementWithStyles("@supports (" + r + ") { #modernizr { position: absolute; } }", function (e) { return "absolute" == computedStyle(e, null, "position") }) } return undefined } function testProps(e, t, n, r) { function o() { i && (delete mStyle.style, delete mStyle.modElem) } if (r = is(r, "undefined") ? !1 : r, !is(n, "undefined")) { var s = nativeTestProps(e, n); if (!is(s, "undefined")) return s } for (var i, d, l, a, f, u = ["modernizr", "tspan", "samp"]; !mStyle.style && u.length;)i = !0, mStyle.modElem = createElement(u.shift()), mStyle.style = mStyle.modElem.style; for (l = e.length, d = 0; l > d; d++)if (a = e[d], f = mStyle.style[a], contains(a, "-") && (a = cssToDOM(a)), mStyle.style[a] !== undefined) { if (r || is(n, "undefined")) return o(), "pfx" == t ? a : !0; try { mStyle.style[a] = n } catch (c) { } if (mStyle.style[a] != f) return o(), "pfx" == t ? a : !0 } return o(), !1 } function testPropsAll(e, t, n, r, o) { var s = e.charAt(0).toUpperCase() + e.slice(1), i = (e + " " + cssomPrefixes.join(s + " ") + s).split(" "); return is(t, "string") || is(t, "undefined") ? testProps(i, t, r, o) : (i = (e + " " + domPrefixes.join(s + " ") + s).split(" "), testDOMProps(i, t, n)) } function testAllProps(e, t, n) { return testPropsAll(e, undefined, undefined, t, n) } var classes = [], tests = [], ModernizrProto = { _version: "3.6.0", _config: { classPrefix: "", enableClasses: !0, enableJSClass: !0, usePrefixes: !0 }, _q: [], on: function (e, t) { var n = this; setTimeout(function () { t(n[e]) }, 0) }, addTest: function (e, t, n) { tests.push({ name: e, fn: t, options: n }) }, addAsyncTest: function (e) { tests.push({ name: null, fn: e }) } }, Modernizr = function () { }; Modernizr.prototype = ModernizrProto, Modernizr = new Modernizr, Modernizr.addTest("svg", !!document.createElementNS && !!document.createElementNS("http://www.w3.org/2000/svg", "svg").createSVGRect); var docElement = document.documentElement, isSVG = "svg" === docElement.nodeName.toLowerCase(), prefixes = ModernizrProto._config.usePrefixes ? " -webkit- -moz- -o- -ms- ".split(" ") : ["", ""]; ModernizrProto._prefixes = prefixes, Modernizr.addTest("cssgradients", function () { for (var e, t = "background-image:", n = "gradient(linear,left top,right bottom,from(#9f9),to(white));", r = "", o = 0, s = prefixes.length - 1; s > o; o++)e = 0 === o ? "to " : "", r += t + prefixes[o] + "linear-gradient(" + e + "left top, #9f9, white);"; Modernizr._config.usePrefixes && (r += t + "-webkit-" + n); var i = createElement("a"), d = i.style; return d.cssText = r, ("" + d.backgroundImage).indexOf("gradient") > -1 }); var newSyntax = "CSS" in window && "supports" in window.CSS, oldSyntax = "supportsCSS" in window; Modernizr.addTest("supports", newSyntax || oldSyntax), Modernizr.addTest("templatestrings", function () { var supports; try { eval("``"), supports = !0 } catch (e) { } return !!supports }); var testStyles = ModernizrProto.testStyles = injectElementWithStyles; Modernizr.addTest("touchevents", function () { var e; if ("ontouchstart" in window || window.DocumentTouch && document instanceof DocumentTouch) e = !0; else { var t = ["@media (", prefixes.join("touch-enabled),("), "heartz", ")", "{#modernizr{top:9px;position:absolute}}"].join(""); testStyles(t, function (t) { e = 9 === t.offsetTop }) } return e }); var omPrefixes = "Moz O ms Webkit", cssomPrefixes = ModernizrProto._config.usePrefixes ? omPrefixes.split(" ") : []; ModernizrProto._cssomPrefixes = cssomPrefixes; var atRule = function (e) { var t, n = prefixes.length, r = window.CSSRule; if ("undefined" == typeof r) return undefined; if (!e) return !1; if (e = e.replace(/^@/, ""), t = e.replace(/-/g, "_").toUpperCase() + "_RULE", t in r) return "@" + e; for (var o = 0; n > o; o++) { var s = prefixes[o], i = s.toUpperCase() + "_" + t; if (i in r) return "@-" + s.toLowerCase() + "-" + e } return !1 }; ModernizrProto.atRule = atRule; var domPrefixes = ModernizrProto._config.usePrefixes ? omPrefixes.toLowerCase().split(" ") : []; ModernizrProto._domPrefixes = domPrefixes; var modElem = { elem: createElement("modernizr") }; Modernizr._q.push(function () { delete modElem.elem }); var mStyle = { style: modElem.elem.style }; Modernizr._q.unshift(function () { delete mStyle.style }), ModernizrProto.testAllProps = testPropsAll, ModernizrProto.testAllProps = testAllProps, Modernizr.addTest("cssanimations", testAllProps("animationName", "a", !0)), Modernizr.addTest("cssgridlegacy", testAllProps("grid-columns", "10px", !0)), Modernizr.addTest("cssgrid", testAllProps("grid-template-rows", "none", !0)), Modernizr.addTest("flexbox", testAllProps("flexBasis", "1px", !0)), Modernizr.addTest("csstransforms", function () { return -1 === navigator.userAgent.indexOf("Android 2.") && testAllProps("transform", "scale(1)", !0) }), Modernizr.addTest("csstransforms3d", function () { return !!testAllProps("perspective", "1px", !0) }), Modernizr.addTest("csstransitions", testAllProps("transition", "all", !0)); var prefixed = ModernizrProto.prefixed = function (e, t, n) { return 0 === e.indexOf("@") ? atRule(e) : (-1 != e.indexOf("-") && (e = cssToDOM(e)), t ? testPropsAll(e, t, n) : testPropsAll(e, "pfx")) }; Modernizr.addTest("objectfit", !!prefixed("objectFit"), { aliases: ["object-fit"] }), testRunner(), setClasses(classes), delete ModernizrProto.addTest, delete ModernizrProto.addAsyncTest; for (var i = 0; i < Modernizr._q.length; i++)Modernizr._q[i](); window.Modernizr = Modernizr }(window, document);